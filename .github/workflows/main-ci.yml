name: Main CI Pipeline
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  # Security and sensitive files check
  security-scan:
    name: Security & Sensitive Files Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for sensitive files
        run: |
          echo "🔍 Scanning for sensitive files..."
          
          # Check for .env files (except .env.example)
          if git ls-files | grep -E '\.env(\.|$)' | grep -v '\.env\.example'; then
            echo "❌ ERROR: Sensitive .env files detected!"
            git ls-files | grep -E '\.env(\.|$)' | grep -v '\.env\.example'
            exit 1
          fi
          
          # Check for backup files
          if git ls-files | grep -E '\.(backup|bak|old|tmp|temp)$'; then
            echo "❌ ERROR: Backup/temporary files detected!"
            git ls-files | grep -E '\.(backup|bak|old|tmp|temp)$'
            exit 1
          fi
          
          echo "✅ No sensitive files detected"

  # Code quality checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint --if-present
      
      - name: Run type checking
        run: npm run type-check --if-present
      
      - name: Run tests
        run: npm run test --if-present

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Verify build output
        run: |
          if [ -d ".next" ] || [ -d "dist" ] || [ -d "out" ]; then
            echo "✅ Build output verified"
          else
            echo "❌ Build output not found"
            exit 1
          fi

  # Dependency security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
      
      - name: Check for outdated packages
        run: npm outdated || true

  # Performance and bundle analysis
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for analysis
        run: npm run build
      
      - name: Analyze bundle size
        run: |
          echo "📊 Bundle size analysis:"
          if [ -d ".next" ]; then
            find .next -name "*.js" -exec wc -c {} + | sort -n | tail -5
          fi
      
      - name: Comment PR with analysis
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let comment = '## 📊 Performance Analysis\n\n';
            
            if (fs.existsSync('.next')) {
              const jsFiles = fs.readdirSync('.next', { recursive: true })
                .filter(file => file.endsWith('.js'))
                .map(file => {
                  const filePath = path.join('.next', file);
                  const stats = fs.statSync(filePath);
                  return { name: file, size: stats.size };
                })
                .sort((a, b) => b.size - a.size)
                .slice(0, 5);
              
              comment += '**Top 5 largest JS files:**\n';
              jsFiles.forEach(file => {
                comment += `- \`${file.name}\`: ${(file.size / 1024).toFixed(2)} KB\n`;
              });
            }
            
            comment += '\n✅ Build completed successfully';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
