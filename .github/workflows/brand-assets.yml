name: Brand Assets Check
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  brand-assets:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Enable corepack and use exact pnpm version
        run: |
          corepack enable
          corepack prepare pnpm@10.13.1 --activate
          echo "Using pnpm version:"
          pnpm --version

      - name: Approve build scripts
        run: |
          echo "Approving necessary build scripts for CI environment"
          pnpm approve-builds @prisma/client @prisma/engines @sentry/cli core-js esbuild prisma unrs-resolver

      - name: Rebuild (run approved postinstalls)
        run: |
          echo "Rebuilding packages with approved build scripts"
          pnpm rebuild -r

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Debug repository state
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Looking for pnpm-lock.yaml:"
          ls -la pnpm-lock.yaml || echo "pnpm-lock.yaml not found"
          echo "pnpm version:"
          pnpm --version

      - name: Install dependencies (with improved fallback)
        run: |
          # Install with frozen lockfile for deterministic builds
          if [ -f pnpm-lock.yaml ]; then
            echo "Lockfile found, installing with frozen flag"
            pnpm install --frozen-lockfile --prefer-offline
          else
            echo "No lockfile found, installing dependencies"
            pnpm install --prefer-offline
          fi

      # Cache PNPM store explicitly if needed by separate cache action (optional)
      # - name: Cache pnpm store
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.pnpm-store
      #     key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-

      - name: Optimize SVGs (svgo)
        run: |
          # Adjust the directory if your assets folder differs
          ASSETS_DIR="apps/web/public"
          # Optimize any SVGs found under public (logos, icons, etc.)
          pnpm svgo -f "$ASSETS_DIR" || true

      - name: Commit optimized brand assets
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Stage only changed SVG files anywhere under public
          CHANGES=$(git ls-files -m | grep -E '^apps/web/public/.*\.svg$' || true)
          if [ -n "$CHANGES" ]; then
            git add $CHANGES
            git commit -m "ðŸ”§ Optimize brand assets with SVGO"
            git push
          else
            echo "No SVG changes to commit."
          fi
