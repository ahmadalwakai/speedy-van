name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.12.2'

jobs:
  # Install and cache dependencies
  install:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
  # Lint and type check
  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run ESLint
      working-directory: ./apps/web
      run: pnpm lint
      
    - name: Type check
      working-directory: ./apps/web
      run: pnpm prisma:generate && npx tsc --noEmit
      
  # Unit tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: install
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run unit tests
      working-directory: ./apps/web
      run: pnpm test
      
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage
        path: apps/web/coverage/
        retention-days: 30
        
  # E2E tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: install
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install Playwright browsers
      working-directory: ./apps/web
      run: npx playwright install --with-deps
      
    - name: Run E2E tests
      working-directory: ./apps/web
      run: pnpm test:e2e
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: apps/web/playwright-report/
        retention-days: 30
        
  # Build and test build
  build:
    runs-on: ubuntu-latest
    needs: [install, lint, unit-tests, e2e-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build application
      working-directory: ./apps/web
      run: pnpm build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: apps/web/.next/
        retention-days: 7
        
  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: install
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run security audit
      working-directory: ./apps/web
      run: pnpm audit --audit-level=moderate
      
    - name: Check for sensitive files
      run: |
        if find . -name ".env*" -not -name ".env.example" | grep -q .; then
          echo "‚ùå Found .env files that should not be committed"
          exit 1
        fi
        
  # Deploy to staging (develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: Render, Vercel, or custom deployment script
        
  # Deploy to production (main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment logic here
        # Example: Render, Vercel, or custom deployment script
        
  # Performance and quality checks
  quality:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Bundle analysis
      working-directory: ./apps/web
      run: |
        ANALYZE=true pnpm build
        echo "üìä Bundle analysis completed"
        
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis
        path: apps/web/bundle-analysis.html
        retention-days: 30
        
  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [build, security, quality]
    if: always()
    steps:
    - name: Notify completion
      run: |
        if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ]; then
          echo "‚úÖ All checks passed successfully!"
        else
          echo "‚ùå Some checks failed. Please review the logs."
          exit 1
        fi
