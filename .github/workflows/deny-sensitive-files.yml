name: Deny Sensitive Files
on: 
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  scan:
    name: Block Sensitive Files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for sensitive environment files
        run: |
          echo "üîç Scanning for sensitive files..."
          
          # Check for .env files (except .env.example)
          if git ls-files | grep -E '\.env(\.|$)' | grep -v '\.env\.example'; then
            echo "‚ùå ERROR: Sensitive .env files detected!"
            echo "Files found:"
            git ls-files | grep -E '\.env(\.|$)' | grep -v '\.env\.example'
            echo ""
            echo "Please remove these files and add them to .gitignore"
            exit 1
          fi
          
          # Check for backup files
          if git ls-files | grep -E '\.(backup|bak|old|tmp|temp)$'; then
            echo "‚ùå ERROR: Backup/temporary files detected!"
            echo "Files found:"
            git ls-files | grep -E '\.(backup|bak|old|tmp|temp)$'
            echo ""
            echo "Please remove these files and add them to .gitignore"
            exit 1
          fi
          
          # Check for local configuration files
          if git ls-files | grep -E '\.local(\.|$)'; then
            echo "‚ùå ERROR: Local configuration files detected!"
            echo "Files found:"
            git ls-files | grep -E '\.local(\.|$)'
            echo ""
            echo "Please remove these files and add them to .gitignore"
            exit 1
          fi
          
          # Check for production environment files
          if git ls-files | grep -E 'env\.production'; then
            echo "‚ùå ERROR: Production environment file detected!"
            echo "Files found:"
            git ls-files | grep -E 'env\.production'
            echo ""
            echo "Please remove this file and add it to .gitignore"
            exit 1
          fi
          
          # Check for log files
          if git ls-files | grep -E '\.(log|logs)$'; then
            echo "‚ùå ERROR: Log files detected!"
            echo "Files found:"
            git ls-files | grep -E '\.(log|logs)$'
            echo ""
            echo "Please remove these files and add them to .gitignore"
            exit 1
          fi
          
          # Check for database files
          if git ls-files | grep -E '\.(db|sqlite|sqlite3)$'; then
            echo "‚ùå ERROR: Database files detected!"
            echo "Files found:"
            git ls-files | grep -E '\.(db|sqlite|sqlite3)$'
            echo ""
            echo "Please remove these files and add them to .gitignore"
            exit 1
          fi
          
          echo "‚úÖ No sensitive files detected"
          echo "‚úÖ Security scan passed"
      
      - name: Check .gitignore configuration
        run: |
          echo "üîç Checking .gitignore configuration..."
          
          # Check if .env files are properly ignored
          if ! grep -q "\.env" .gitignore; then
            echo "‚ö†Ô∏è  WARNING: .env files not found in .gitignore"
          fi
          
          # Check if backup files are ignored
          if ! grep -q "\.backup" .gitignore; then
            echo "‚ö†Ô∏è  WARNING: .backup files not found in .gitignore"
          fi
          
          # Check if local files are ignored
          if ! grep -q "\.local" .gitignore; then
            echo "‚ö†Ô∏è  WARNING: .local files not found in .gitignore"
          fi
          
          echo "‚úÖ .gitignore check completed"
